{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to goops DevOps toolset written in Go.","title":"Home"},{"location":"#welcome-to-goops","text":"DevOps toolset written in Go.","title":"Welcome to goops"},{"location":"examples/","text":"Gitlab CI image: docker:stable variables: # When using dind service we need to instruct docker, to talk with the # daemon started inside of the service. The daemon is available with # a network connection instead of the default /var/run/docker.sock socket. # # The 'docker' hostname is the alias of the service container as described at # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services # # Note that if you're using Kubernetes executor, the variable should be set to # tcp://localhost:2375 because of how Kubernetes executor connects services # to the job container DOCKER_HOST: tcp://docker:2375/ # When using dind, it's wise to use the overlayfs driver for # improved performance. DOCKER_DRIVER: overlay2 services: - docker:dind stages: - common - build - deploy - jira cache: key: $CI_PIPELINE_ID paths: # keep env file between stages - ./gitlab.env # Generate semantic version for current build, common: stage: common image: sotomski/gitlab-tools script: - goops pipeline common only: - merge_requests - master - tags - /^.*-stable$/ lint: stage: build image: node:10 script: - yarn install - node_modules/.bin/ng lint only: - merge_requests - master - tags - /^.*-stable$/ test: stage: build image: sotomski/node:10-chrome script: - yarn install - node_modules/.bin/ng test --browsers ChromeHeadlessNoSandbox --source-map=false --watch=false only: - merge_requests - master - tags - /^.*-stable$/ # build build-push: stage: build image: sotomski/gitlab-tools:dind script: - source gitlab.env - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com - goops pipeline docker build -t $CI_REGISTRY_IMAGE:$CI_SEMVER . - goops pipeline docker push $CI_REGISTRY_IMAGE:$CI_SEMVER only: - merge_requests - master - tags - /^.*-stable$/ jira-cr: stage: jira image: sotomski/gitlab-tools script: - source gitlab.env - goops pipeline jira transition code review only: - merge_requests jira-in-test: stage: jira image: sotomski/gitlab-tools script: - source gitlab.env - goops pipeline jira transition in test only: - master # release Jira version release: stage: deploy image: sotomski/gitlab-tools script: - source gitlab.env - jira-cli version release $JIRA_PROJECT_KEY $CI_SEMVER_RELEASE only: - tags # deploy staging environment deploy_staging: stage: deploy image: alpine script: - source gitlab.env - echo deploy version $CI_SEMVER to staging environment environment: name: staging url: $STAGING_URL only: - master # deploy pre-prod environment deploy_pre-prod: stage: deploy image: alpine script: - source gitlab.env - echo deploy version $CI_SEMVER to pre-prod environment environment: name: pre-prod url: $PRE-PROD_URL when: manual only: - master - tags - /^.*-stable$/ # deploy prod environment deploy_prod: stage: deploy image: alpine script: - source gitlab.env - echo deploy version $CI_SEMVER to prod environment: name: pre-prod url: $PROD_URL when: manual only: - tags Jenkins Travis","title":"Examples"},{"location":"examples/#gitlab-ci","text":"image: docker:stable variables: # When using dind service we need to instruct docker, to talk with the # daemon started inside of the service. The daemon is available with # a network connection instead of the default /var/run/docker.sock socket. # # The 'docker' hostname is the alias of the service container as described at # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services # # Note that if you're using Kubernetes executor, the variable should be set to # tcp://localhost:2375 because of how Kubernetes executor connects services # to the job container DOCKER_HOST: tcp://docker:2375/ # When using dind, it's wise to use the overlayfs driver for # improved performance. DOCKER_DRIVER: overlay2 services: - docker:dind stages: - common - build - deploy - jira cache: key: $CI_PIPELINE_ID paths: # keep env file between stages - ./gitlab.env # Generate semantic version for current build, common: stage: common image: sotomski/gitlab-tools script: - goops pipeline common only: - merge_requests - master - tags - /^.*-stable$/ lint: stage: build image: node:10 script: - yarn install - node_modules/.bin/ng lint only: - merge_requests - master - tags - /^.*-stable$/ test: stage: build image: sotomski/node:10-chrome script: - yarn install - node_modules/.bin/ng test --browsers ChromeHeadlessNoSandbox --source-map=false --watch=false only: - merge_requests - master - tags - /^.*-stable$/ # build build-push: stage: build image: sotomski/gitlab-tools:dind script: - source gitlab.env - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com - goops pipeline docker build -t $CI_REGISTRY_IMAGE:$CI_SEMVER . - goops pipeline docker push $CI_REGISTRY_IMAGE:$CI_SEMVER only: - merge_requests - master - tags - /^.*-stable$/ jira-cr: stage: jira image: sotomski/gitlab-tools script: - source gitlab.env - goops pipeline jira transition code review only: - merge_requests jira-in-test: stage: jira image: sotomski/gitlab-tools script: - source gitlab.env - goops pipeline jira transition in test only: - master # release Jira version release: stage: deploy image: sotomski/gitlab-tools script: - source gitlab.env - jira-cli version release $JIRA_PROJECT_KEY $CI_SEMVER_RELEASE only: - tags # deploy staging environment deploy_staging: stage: deploy image: alpine script: - source gitlab.env - echo deploy version $CI_SEMVER to staging environment environment: name: staging url: $STAGING_URL only: - master # deploy pre-prod environment deploy_pre-prod: stage: deploy image: alpine script: - source gitlab.env - echo deploy version $CI_SEMVER to pre-prod environment environment: name: pre-prod url: $PRE-PROD_URL when: manual only: - master - tags - /^.*-stable$/ # deploy prod environment deploy_prod: stage: deploy image: alpine script: - source gitlab.env - echo deploy version $CI_SEMVER to prod environment: name: pre-prod url: $PROD_URL when: manual only: - tags","title":"Gitlab CI"},{"location":"examples/#jenkins","text":"","title":"Jenkins"},{"location":"examples/#travis","text":"","title":"Travis"},{"location":"getting-started/","text":"Installation Linux and Mac To install latest nightly build of goops run below command. If you wish to install stable version please replace nightly with specific version from releases page . $ VERSION=nightly sudo curl -L https://github.com/sotomskir/goops/releases/download/$VERSION/goops-$(uname -s)-$(uname -m) -o /usr/local/bin/goops Windows You can download pre build exe file from releases page . CI pipeline configuration goops is working on environment variables. To initialize goops variables setenv command should be run on the beginning of pipeline. $ . (goops setenv) This command will set goops environment variables. Full list of goops variables is described in Variables chapter . Note goops variables should be persisted between pipeline stages. Many CI/CD tools will reset variables on each stage. It's up to you to make sure that variables are persisted between stages. Persisting variables between pipeline stages goops setenv command will also save variables to .goops.env file. To restore variables from file run: $ source .goops.env You must ensure that .goops.env file is persisted between stages. Below you will find couple of examples how to achieve this in various CI tools. Gitlab CI .gitlab-ci.yml cache: key: $CI_PIPELINE_ID paths: # keep env file between stages - ./.goops.env TODO: add travis example Configuration methods goops has two methods of configuration environment variables configuration file stored in repo .goops.yml Note Environment variables should be uppercase e.g. GOOPS_CI_TYPE=jenkins while configuration file variables should be lowercase e.g. goops_ci_type: jenkins goops has handy init command to create sample configuration file .goops.yml . Command should be run from project directory. $ goops init Next step is to adjust configuration to your needs and commit file to repository. Full specification of the configuration file is described in configuration variables chapter. Gitlab environment variables Environment variables in Gitlab can be configured on group or project level settings CI/CD Travis CI environment variables Go to project settings environment variables section Jenkins environment variables Manage Jenkins Configure System Global variables","title":"Getting started"},{"location":"getting-started/#installation","text":"Linux and Mac To install latest nightly build of goops run below command. If you wish to install stable version please replace nightly with specific version from releases page . $ VERSION=nightly sudo curl -L https://github.com/sotomskir/goops/releases/download/$VERSION/goops-$(uname -s)-$(uname -m) -o /usr/local/bin/goops Windows You can download pre build exe file from releases page .","title":"Installation"},{"location":"getting-started/#ci-pipeline-configuration","text":"goops is working on environment variables. To initialize goops variables setenv command should be run on the beginning of pipeline. $ . (goops setenv) This command will set goops environment variables. Full list of goops variables is described in Variables chapter . Note goops variables should be persisted between pipeline stages. Many CI/CD tools will reset variables on each stage. It's up to you to make sure that variables are persisted between stages.","title":"CI pipeline configuration"},{"location":"getting-started/#persisting-variables-between-pipeline-stages","text":"goops setenv command will also save variables to .goops.env file. To restore variables from file run: $ source .goops.env You must ensure that .goops.env file is persisted between stages. Below you will find couple of examples how to achieve this in various CI tools. Gitlab CI .gitlab-ci.yml cache: key: $CI_PIPELINE_ID paths: # keep env file between stages - ./.goops.env TODO: add travis example","title":"Persisting variables between pipeline stages"},{"location":"getting-started/#configuration-methods","text":"goops has two methods of configuration environment variables configuration file stored in repo .goops.yml Note Environment variables should be uppercase e.g. GOOPS_CI_TYPE=jenkins while configuration file variables should be lowercase e.g. goops_ci_type: jenkins goops has handy init command to create sample configuration file .goops.yml . Command should be run from project directory. $ goops init Next step is to adjust configuration to your needs and commit file to repository. Full specification of the configuration file is described in configuration variables chapter.","title":"Configuration methods"},{"location":"getting-started/#gitlab-environment-variables","text":"Environment variables in Gitlab can be configured on group or project level settings CI/CD","title":"Gitlab environment variables"},{"location":"getting-started/#travis-ci-environment-variables","text":"Go to project settings environment variables section","title":"Travis CI environment variables"},{"location":"getting-started/#jenkins-environment-variables","text":"Manage Jenkins Configure System Global variables","title":"Jenkins environment variables"},{"location":"commands/goops/","text":"goops DevOps toolset written in Go. Synopsis DevOps toolset written in Go. Options --config string config file (default is $HOME/.goops.yaml) --debug Debug output -h, --help help for goops --no-color Disable ANSI color output -s, --server string Gitlab API Url -a, --token string Gitlab API auth token --trace Trace output SEE ALSO goops completion - Generates bash completion script goops export - Generate environment variables export goops issues - List Jira issue keys mentioned in merge request title, description and commit messages goops pipeline - High level API for use with Gitlab CI pipelines goops version - Generate semantic version for current HEAD Auto generated by spf13/cobra on 7-Apr-2019","title":"Goops"},{"location":"commands/goops/#goops","text":"DevOps toolset written in Go.","title":"goops"},{"location":"commands/goops/#synopsis","text":"DevOps toolset written in Go.","title":"Synopsis"},{"location":"commands/goops/#options","text":"--config string config file (default is $HOME/.goops.yaml) --debug Debug output -h, --help help for goops --no-color Disable ANSI color output -s, --server string Gitlab API Url -a, --token string Gitlab API auth token --trace Trace output","title":"Options"},{"location":"commands/goops/#see-also","text":"goops completion - Generates bash completion script goops export - Generate environment variables export goops issues - List Jira issue keys mentioned in merge request title, description and commit messages goops pipeline - High level API for use with Gitlab CI pipelines goops version - Generate semantic version for current HEAD","title":"SEE ALSO"},{"location":"commands/goops/#auto-generated-by-spf13cobra-on-7-apr-2019","text":"","title":"Auto generated by spf13/cobra on 7-Apr-2019"},{"location":"commands/goops_completion/","text":"goops completion Generates bash completion script Synopsis To load completion run . (goops completion) To configure your bash shell to load completions for each session add to your bashrc ~/.bashrc or ~/.profile . (goops completion) goops completion [flags] Options -h, --help help for completion Options inherited from parent commands --config string config file (default is $HOME/.goops.yaml) --debug Debug output --no-color Disable ANSI color output --trace Trace output SEE ALSO goops - DevOps toolset written in Go. Auto generated by spf13/cobra on 7-Apr-2019","title":"Goops completion"},{"location":"commands/goops_completion/#goops-completion","text":"Generates bash completion script","title":"goops completion"},{"location":"commands/goops_completion/#synopsis","text":"To load completion run . (goops completion) To configure your bash shell to load completions for each session add to your bashrc","title":"Synopsis"},{"location":"commands/goops_completion/#bashrc-or-profile","text":". (goops completion) goops completion [flags]","title":"~/.bashrc or ~/.profile"},{"location":"commands/goops_completion/#options","text":"-h, --help help for completion","title":"Options"},{"location":"commands/goops_completion/#options-inherited-from-parent-commands","text":"--config string config file (default is $HOME/.goops.yaml) --debug Debug output --no-color Disable ANSI color output --trace Trace output","title":"Options inherited from parent commands"},{"location":"commands/goops_completion/#see-also","text":"goops - DevOps toolset written in Go.","title":"SEE ALSO"},{"location":"commands/goops_completion/#auto-generated-by-spf13cobra-on-7-apr-2019","text":"","title":"Auto generated by spf13/cobra on 7-Apr-2019"},{"location":"commands/goops_export/","text":"goops export Generate environment variables export Synopsis Generate environment variables export goops export VAR [VAR...] [flags] Options -h, --help help for export Options inherited from parent commands --config string config file (default is $HOME/.goops.yaml) --debug Debug output --no-color Disable ANSI color output --trace Trace output SEE ALSO goops - DevOps toolset written in Go. Auto generated by spf13/cobra on 7-Apr-2019","title":"Goops export"},{"location":"commands/goops_export/#goops-export","text":"Generate environment variables export","title":"goops export"},{"location":"commands/goops_export/#synopsis","text":"Generate environment variables export goops export VAR [VAR...] [flags]","title":"Synopsis"},{"location":"commands/goops_export/#options","text":"-h, --help help for export","title":"Options"},{"location":"commands/goops_export/#options-inherited-from-parent-commands","text":"--config string config file (default is $HOME/.goops.yaml) --debug Debug output --no-color Disable ANSI color output --trace Trace output","title":"Options inherited from parent commands"},{"location":"commands/goops_export/#see-also","text":"goops - DevOps toolset written in Go.","title":"SEE ALSO"},{"location":"commands/goops_export/#auto-generated-by-spf13cobra-on-7-apr-2019","text":"","title":"Auto generated by spf13/cobra on 7-Apr-2019"},{"location":"commands/goops_issues/","text":"goops issues List Jira issue keys mentioned in merge request title, description and commit messages Synopsis List Jira issue keys mentioned in merge request title, description and commit messages goops issues [flags] Options -h, --help help for issues -m, --mr string Merge request iid -p, --project string Project id Options inherited from parent commands --config string config file (default is $HOME/.goops.yaml) --debug Debug output --no-color Disable ANSI color output --trace Trace output SEE ALSO goops - DevOps toolset written in Go. Auto generated by spf13/cobra on 7-Apr-2019","title":"Goops issues"},{"location":"commands/goops_issues/#goops-issues","text":"List Jira issue keys mentioned in merge request title, description and commit messages","title":"goops issues"},{"location":"commands/goops_issues/#synopsis","text":"List Jira issue keys mentioned in merge request title, description and commit messages goops issues [flags]","title":"Synopsis"},{"location":"commands/goops_issues/#options","text":"-h, --help help for issues -m, --mr string Merge request iid -p, --project string Project id","title":"Options"},{"location":"commands/goops_issues/#options-inherited-from-parent-commands","text":"--config string config file (default is $HOME/.goops.yaml) --debug Debug output --no-color Disable ANSI color output --trace Trace output","title":"Options inherited from parent commands"},{"location":"commands/goops_issues/#see-also","text":"goops - DevOps toolset written in Go.","title":"SEE ALSO"},{"location":"commands/goops_issues/#auto-generated-by-spf13cobra-on-7-apr-2019","text":"","title":"Auto generated by spf13/cobra on 7-Apr-2019"},{"location":"commands/goops_pipeline/","text":"goops pipeline High level API for use with Gitlab CI pipelines Synopsis High level API for use with Gitlab CI pipelines Options -h, --help help for pipeline Options inherited from parent commands --config string config file (default is $HOME/.goops.yaml) --debug Debug output --no-color Disable ANSI color output --trace Trace output SEE ALSO goops - DevOps toolset written in Go. goops pipeline common - Sets environment variables, and runs common tasks. Should be called prior to other pipeline commands goops pipeline docker - Docker tasks goops pipeline jira - Atlassian's Jira integration Auto generated by spf13/cobra on 7-Apr-2019","title":"Goops pipeline"},{"location":"commands/goops_pipeline/#goops-pipeline","text":"High level API for use with Gitlab CI pipelines","title":"goops pipeline"},{"location":"commands/goops_pipeline/#synopsis","text":"High level API for use with Gitlab CI pipelines","title":"Synopsis"},{"location":"commands/goops_pipeline/#options","text":"-h, --help help for pipeline","title":"Options"},{"location":"commands/goops_pipeline/#options-inherited-from-parent-commands","text":"--config string config file (default is $HOME/.goops.yaml) --debug Debug output --no-color Disable ANSI color output --trace Trace output","title":"Options inherited from parent commands"},{"location":"commands/goops_pipeline/#see-also","text":"goops - DevOps toolset written in Go. goops pipeline common - Sets environment variables, and runs common tasks. Should be called prior to other pipeline commands goops pipeline docker - Docker tasks goops pipeline jira - Atlassian's Jira integration","title":"SEE ALSO"},{"location":"commands/goops_pipeline/#auto-generated-by-spf13cobra-on-7-apr-2019","text":"","title":"Auto generated by spf13/cobra on 7-Apr-2019"},{"location":"commands/goops_pipeline_common/","text":"goops pipeline common Sets environment variables, and runs common tasks. Should be called prior to other pipeline commands Synopsis Sets environment variables, and runs common tasks. Should be called prior to other pipeline commands. This command will call version and issues commands internally. And will save following variables to gitlab.env file: CI_SEMVER_RELEASE, CI_SEMVER, CI_ISSUES. This way allows to share variables between pipeline stages. Variables can be used in next stages by reading them from gitlab.env file, using command \"source gitlab.env\". If build is not in merge context CI_ISSUES will be fetched from previous merged merge request. All CI_ISSUES will be assigned to CI_SEMVER_RELEASE version in Jira. goops pipeline common [flags] Options -h, --help help for common Options inherited from parent commands --config string config file (default is $HOME/.goops.yaml) --debug Debug output --no-color Disable ANSI color output --trace Trace output SEE ALSO goops pipeline - High level API for use with Gitlab CI pipelines Auto generated by spf13/cobra on 7-Apr-2019","title":"Goops pipeline common"},{"location":"commands/goops_pipeline_common/#goops-pipeline-common","text":"Sets environment variables, and runs common tasks. Should be called prior to other pipeline commands","title":"goops pipeline common"},{"location":"commands/goops_pipeline_common/#synopsis","text":"Sets environment variables, and runs common tasks. Should be called prior to other pipeline commands. This command will call version and issues commands internally. And will save following variables to gitlab.env file: CI_SEMVER_RELEASE, CI_SEMVER, CI_ISSUES. This way allows to share variables between pipeline stages. Variables can be used in next stages by reading them from gitlab.env file, using command \"source gitlab.env\". If build is not in merge context CI_ISSUES will be fetched from previous merged merge request. All CI_ISSUES will be assigned to CI_SEMVER_RELEASE version in Jira. goops pipeline common [flags]","title":"Synopsis"},{"location":"commands/goops_pipeline_common/#options","text":"-h, --help help for common","title":"Options"},{"location":"commands/goops_pipeline_common/#options-inherited-from-parent-commands","text":"--config string config file (default is $HOME/.goops.yaml) --debug Debug output --no-color Disable ANSI color output --trace Trace output","title":"Options inherited from parent commands"},{"location":"commands/goops_pipeline_common/#see-also","text":"goops pipeline - High level API for use with Gitlab CI pipelines","title":"SEE ALSO"},{"location":"commands/goops_pipeline_common/#auto-generated-by-spf13cobra-on-7-apr-2019","text":"","title":"Auto generated by spf13/cobra on 7-Apr-2019"},{"location":"commands/goops_pipeline_docker/","text":"goops pipeline docker Docker tasks Synopsis Docker tasks Options -h, --help help for docker Options inherited from parent commands --config string config file (default is $HOME/.goops.yaml) --debug Debug output --no-color Disable ANSI color output --trace Trace output SEE ALSO goops pipeline - High level API for use with Gitlab CI pipelines goops pipeline docker build - Build docker image goops pipeline docker push - Push docker images to registry Auto generated by spf13/cobra on 7-Apr-2019","title":"Goops pipeline docker"},{"location":"commands/goops_pipeline_docker/#goops-pipeline-docker","text":"Docker tasks","title":"goops pipeline docker"},{"location":"commands/goops_pipeline_docker/#synopsis","text":"Docker tasks","title":"Synopsis"},{"location":"commands/goops_pipeline_docker/#options","text":"-h, --help help for docker","title":"Options"},{"location":"commands/goops_pipeline_docker/#options-inherited-from-parent-commands","text":"--config string config file (default is $HOME/.goops.yaml) --debug Debug output --no-color Disable ANSI color output --trace Trace output","title":"Options inherited from parent commands"},{"location":"commands/goops_pipeline_docker/#see-also","text":"goops pipeline - High level API for use with Gitlab CI pipelines goops pipeline docker build - Build docker image goops pipeline docker push - Push docker images to registry","title":"SEE ALSO"},{"location":"commands/goops_pipeline_docker/#auto-generated-by-spf13cobra-on-7-apr-2019","text":"","title":"Auto generated by spf13/cobra on 7-Apr-2019"},{"location":"commands/goops_pipeline_docker_build/","text":"goops pipeline docker build Build docker image Synopsis Build docker image goops pipeline docker build PATH [flags] Options -f, --file string Name of the Dockerfile (Default is 'PATH/Dockerfile') (default Dockerfile ) -h, --help help for build -t, --tag string Name and optionally a tag in the 'name:tag' format Options inherited from parent commands --config string config file (default is $HOME/.goops.yaml) --debug Debug output --no-color Disable ANSI color output --trace Trace output SEE ALSO goops pipeline docker - Docker tasks Auto generated by spf13/cobra on 7-Apr-2019","title":"Goops pipeline docker build"},{"location":"commands/goops_pipeline_docker_build/#goops-pipeline-docker-build","text":"Build docker image","title":"goops pipeline docker build"},{"location":"commands/goops_pipeline_docker_build/#synopsis","text":"Build docker image goops pipeline docker build PATH [flags]","title":"Synopsis"},{"location":"commands/goops_pipeline_docker_build/#options","text":"-f, --file string Name of the Dockerfile (Default is 'PATH/Dockerfile') (default Dockerfile ) -h, --help help for build -t, --tag string Name and optionally a tag in the 'name:tag' format","title":"Options"},{"location":"commands/goops_pipeline_docker_build/#options-inherited-from-parent-commands","text":"--config string config file (default is $HOME/.goops.yaml) --debug Debug output --no-color Disable ANSI color output --trace Trace output","title":"Options inherited from parent commands"},{"location":"commands/goops_pipeline_docker_build/#see-also","text":"goops pipeline docker - Docker tasks","title":"SEE ALSO"},{"location":"commands/goops_pipeline_docker_build/#auto-generated-by-spf13cobra-on-7-apr-2019","text":"","title":"Auto generated by spf13/cobra on 7-Apr-2019"},{"location":"commands/goops_pipeline_docker_push/","text":"goops pipeline docker push Push docker images to registry Synopsis Push docker images to registry. If build context is not one of: master, tags, ^.*-stable$ push will be skipped. If build is from git tag it will also push image with \"stable\" tag. If build is from master branch it will also push image with \"latest\" tag goops pipeline docker push TAG [flags] Options -h, --help help for push Options inherited from parent commands --config string config file (default is $HOME/.goops.yaml) --debug Debug output --no-color Disable ANSI color output --trace Trace output SEE ALSO goops pipeline docker - Docker tasks Auto generated by spf13/cobra on 7-Apr-2019","title":"Goops pipeline docker push"},{"location":"commands/goops_pipeline_docker_push/#goops-pipeline-docker-push","text":"Push docker images to registry","title":"goops pipeline docker push"},{"location":"commands/goops_pipeline_docker_push/#synopsis","text":"Push docker images to registry. If build context is not one of: master, tags, ^.*-stable$ push will be skipped. If build is from git tag it will also push image with \"stable\" tag. If build is from master branch it will also push image with \"latest\" tag goops pipeline docker push TAG [flags]","title":"Synopsis"},{"location":"commands/goops_pipeline_docker_push/#options","text":"-h, --help help for push","title":"Options"},{"location":"commands/goops_pipeline_docker_push/#options-inherited-from-parent-commands","text":"--config string config file (default is $HOME/.goops.yaml) --debug Debug output --no-color Disable ANSI color output --trace Trace output","title":"Options inherited from parent commands"},{"location":"commands/goops_pipeline_docker_push/#see-also","text":"goops pipeline docker - Docker tasks","title":"SEE ALSO"},{"location":"commands/goops_pipeline_docker_push/#auto-generated-by-spf13cobra-on-7-apr-2019","text":"","title":"Auto generated by spf13/cobra on 7-Apr-2019"},{"location":"commands/goops_pipeline_jira/","text":"goops pipeline jira Atlassian's Jira integration Synopsis Atlassian's Jira integration Options -h, --help help for jira Options inherited from parent commands --config string config file (default is $HOME/.goops.yaml) --debug Debug output --no-color Disable ANSI color output --trace Trace output SEE ALSO goops pipeline - High level API for use with Gitlab CI pipelines goops pipeline jira transition - Transition all issues from CI_ISSUES to STATE Auto generated by spf13/cobra on 7-Apr-2019","title":"Goops pipeline jira"},{"location":"commands/goops_pipeline_jira/#goops-pipeline-jira","text":"Atlassian's Jira integration","title":"goops pipeline jira"},{"location":"commands/goops_pipeline_jira/#synopsis","text":"Atlassian's Jira integration","title":"Synopsis"},{"location":"commands/goops_pipeline_jira/#options","text":"-h, --help help for jira","title":"Options"},{"location":"commands/goops_pipeline_jira/#options-inherited-from-parent-commands","text":"--config string config file (default is $HOME/.goops.yaml) --debug Debug output --no-color Disable ANSI color output --trace Trace output","title":"Options inherited from parent commands"},{"location":"commands/goops_pipeline_jira/#see-also","text":"goops pipeline - High level API for use with Gitlab CI pipelines goops pipeline jira transition - Transition all issues from CI_ISSUES to STATE","title":"SEE ALSO"},{"location":"commands/goops_pipeline_jira/#auto-generated-by-spf13cobra-on-7-apr-2019","text":"","title":"Auto generated by spf13/cobra on 7-Apr-2019"},{"location":"commands/goops_pipeline_jira_transition/","text":"goops pipeline jira transition Transition all issues from CI_ISSUES to STATE Synopsis Transition all issues from CI_ISSUES to STATE goops pipeline jira transition STATE [flags] Options -h, --help help for transition Options inherited from parent commands --config string config file (default is $HOME/.goops.yaml) --debug Debug output --no-color Disable ANSI color output --trace Trace output SEE ALSO goops pipeline jira - Atlassian's Jira integration Auto generated by spf13/cobra on 7-Apr-2019","title":"Goops pipeline jira transition"},{"location":"commands/goops_pipeline_jira_transition/#goops-pipeline-jira-transition","text":"Transition all issues from CI_ISSUES to STATE","title":"goops pipeline jira transition"},{"location":"commands/goops_pipeline_jira_transition/#synopsis","text":"Transition all issues from CI_ISSUES to STATE goops pipeline jira transition STATE [flags]","title":"Synopsis"},{"location":"commands/goops_pipeline_jira_transition/#options","text":"-h, --help help for transition","title":"Options"},{"location":"commands/goops_pipeline_jira_transition/#options-inherited-from-parent-commands","text":"--config string config file (default is $HOME/.goops.yaml) --debug Debug output --no-color Disable ANSI color output --trace Trace output","title":"Options inherited from parent commands"},{"location":"commands/goops_pipeline_jira_transition/#see-also","text":"goops pipeline jira - Atlassian's Jira integration","title":"SEE ALSO"},{"location":"commands/goops_pipeline_jira_transition/#auto-generated-by-spf13cobra-on-7-apr-2019","text":"","title":"Auto generated by spf13/cobra on 7-Apr-2019"},{"location":"commands/goops_version/","text":"goops version Generate semantic version for current HEAD Synopsis Generate semantic version for current HEAD. Version generation is based on git tags. If current HEAD is tagged then tag will be used as version. Else command will lookup for previous tag bump it's minor version, reset patch version and append '-SNAPSHOT' When there are no tags found version will be '0.1.0-SNAPSHOT' goops version [flags] Options -f, --file string Output file (default gitlab.env ) -h, --help help for version -r, --release Print release version (without -SNAPSHOT) -s, --save Save to file (gitlab.env by default). Override by --file flag Options inherited from parent commands --config string config file (default is $HOME/.goops.yaml) --debug Debug output --no-color Disable ANSI color output --trace Trace output SEE ALSO goops - DevOps toolset written in Go. Auto generated by spf13/cobra on 7-Apr-2019","title":"version"},{"location":"commands/goops_version/#goops-version","text":"Generate semantic version for current HEAD","title":"goops version"},{"location":"commands/goops_version/#synopsis","text":"Generate semantic version for current HEAD. Version generation is based on git tags. If current HEAD is tagged then tag will be used as version. Else command will lookup for previous tag bump it's minor version, reset patch version and append '-SNAPSHOT' When there are no tags found version will be '0.1.0-SNAPSHOT' goops version [flags]","title":"Synopsis"},{"location":"commands/goops_version/#options","text":"-f, --file string Output file (default gitlab.env ) -h, --help help for version -r, --release Print release version (without -SNAPSHOT) -s, --save Save to file (gitlab.env by default). Override by --file flag","title":"Options"},{"location":"commands/goops_version/#options-inherited-from-parent-commands","text":"--config string config file (default is $HOME/.goops.yaml) --debug Debug output --no-color Disable ANSI color output --trace Trace output","title":"Options inherited from parent commands"},{"location":"commands/goops_version/#see-also","text":"goops - DevOps toolset written in Go.","title":"SEE ALSO"},{"location":"commands/goops_version/#auto-generated-by-spf13cobra-on-7-apr-2019","text":"","title":"Auto generated by spf13/cobra on 7-Apr-2019"},{"location":"features/docker/","text":"Description Automatic docker stable latest tags based on selected semver strategy. Output variables none Configuration defaults GOOPSC_DOCKER=false GOOPSC_SEMVER_STRATEGY=gitlab-flow gitlab-flow strategy All tagged builds are stable. All builds from master are latest. Usage $ goops docker build -t $DOCKER_IMAGE:$GOOPS_SEMVER . $ goops docker push $DOCKER_IMAGE:$GOOPS_SEMVER","title":"Docker stable & latest"},{"location":"features/docker/#description","text":"Automatic docker stable latest tags based on selected semver strategy.","title":"Description"},{"location":"features/docker/#output-variables","text":"none","title":"Output variables"},{"location":"features/docker/#configuration-defaults","text":"GOOPSC_DOCKER=false GOOPSC_SEMVER_STRATEGY=gitlab-flow","title":"Configuration defaults"},{"location":"features/docker/#gitlab-flow-strategy","text":"All tagged builds are stable. All builds from master are latest.","title":"gitlab-flow strategy"},{"location":"features/docker/#usage","text":"$ goops docker build -t $DOCKER_IMAGE:$GOOPS_SEMVER . $ goops docker push $DOCKER_IMAGE:$GOOPS_SEMVER","title":"Usage"},{"location":"features/jira/","text":"Description When enabled setenv command will fetch jira issue keys from merge request title, description and commit messages linked to merge request. Each issue found will be linked to jira version. If Jira version does not exists it will be created, along with deployment issue. GOOPS_SEMVER_RELEASE variable must be set, by semver feature or manually. Output variables GOOPS_JIRA_ISSUES=TEST-1 TEST-2 TEST-3 Configuration defaults GOOPSC_JIRA=false GOOPSC_JIRA_PROJECT_KEY= GOOPSC_JIRA_SERVER_URL= GOOPSC_JIRA_USER= GOOPSC_JIRA_PASSWORD= GOOPSC_JIRA_VERSION_ASSIGN=true GOOPSC_JIRA_VERSION_CREATE=true GOOPSC_JIRA_CREATE_DEPLOYMENT_ISSUE=true GOOPSC_JIRA_ISSUE_TRANSITION=true GOOPSC_JIRA_WORKFLOW=workflow.yaml GOOPSC_JIRA_WORKFLOW_CONTENT= GOOPSC_JIRA Enable Jira integration GOOPSC_JIRA_PROJECT_KEY required: true Jira project key GOOPSC_JIRA_SERVER_URL required: true Jira server url e.g. https://jira.example.com GOOPSC_JIRA_USER required: true Jira username GOOPSC_JIRA_PASSWORD required: true Jira password GOOPSC_JIRA_VERSION_ASSIGN Assign issues to Jira version. Semver feature must be enabled or GOOPS_SEMVER_RELEASE variable set. Issue list is taken from GOOPS_JIRA_ISSUES variable. GOOPSC_JIRA_VERSION_CREATE Create Jira version. When assigning issue to version and version doesn't exists it will be created. GOOPSC_JIRA_CREATE_DEPLOYMENT_ISSUE When creating Jira version create deployment issue assigned to version. GOOPSC_JIRA_ISSUE_TRANSITION Transition Jira issues. GOOPSC_JIRA_WORKFLOW Path to workflow definition. Can be local file or remote http path. Transitioning issues $ goops jira transition 'target state' jira transition command require workflow definition in yaml file. Default filename is workflow.yaml and can be overridden by --workflow flag or GOOPSC_JIRA_WORKFLOW variable. Remote http url is also accepted. workflow structure workflow: source status: target status: transition name default: default transition name example workflow definition workflow: code review: default: ready to test in test: done: done default: bug found to do: rejected: reject default: start progress in progress: default: code review done: default: reopen rejected: default: reopen corresponding Jira workflow Workflow from env variable Alternatively workflow file content can be passed by GOOPSC_JIRA_WORKFLOW_CONTENT environment variable. export JIRA_WORKFLOW_CONTENT=$(cat - EOM workflow: code review: default: ready to test in test: done: done default: bug found to do: rejected: reject default: start progress in progress: default: code review done: default: reopen rejected: default: reopen EOM )","title":"Jira integration"},{"location":"features/jira/#description","text":"When enabled setenv command will fetch jira issue keys from merge request title, description and commit messages linked to merge request. Each issue found will be linked to jira version. If Jira version does not exists it will be created, along with deployment issue. GOOPS_SEMVER_RELEASE variable must be set, by semver feature or manually.","title":"Description"},{"location":"features/jira/#output-variables","text":"GOOPS_JIRA_ISSUES=TEST-1 TEST-2 TEST-3","title":"Output variables"},{"location":"features/jira/#configuration-defaults","text":"GOOPSC_JIRA=false GOOPSC_JIRA_PROJECT_KEY= GOOPSC_JIRA_SERVER_URL= GOOPSC_JIRA_USER= GOOPSC_JIRA_PASSWORD= GOOPSC_JIRA_VERSION_ASSIGN=true GOOPSC_JIRA_VERSION_CREATE=true GOOPSC_JIRA_CREATE_DEPLOYMENT_ISSUE=true GOOPSC_JIRA_ISSUE_TRANSITION=true GOOPSC_JIRA_WORKFLOW=workflow.yaml GOOPSC_JIRA_WORKFLOW_CONTENT= GOOPSC_JIRA Enable Jira integration GOOPSC_JIRA_PROJECT_KEY required: true Jira project key GOOPSC_JIRA_SERVER_URL required: true Jira server url e.g. https://jira.example.com GOOPSC_JIRA_USER required: true Jira username GOOPSC_JIRA_PASSWORD required: true Jira password GOOPSC_JIRA_VERSION_ASSIGN Assign issues to Jira version. Semver feature must be enabled or GOOPS_SEMVER_RELEASE variable set. Issue list is taken from GOOPS_JIRA_ISSUES variable. GOOPSC_JIRA_VERSION_CREATE Create Jira version. When assigning issue to version and version doesn't exists it will be created. GOOPSC_JIRA_CREATE_DEPLOYMENT_ISSUE When creating Jira version create deployment issue assigned to version. GOOPSC_JIRA_ISSUE_TRANSITION Transition Jira issues. GOOPSC_JIRA_WORKFLOW Path to workflow definition. Can be local file or remote http path.","title":"Configuration defaults"},{"location":"features/jira/#transitioning-issues","text":"$ goops jira transition 'target state' jira transition command require workflow definition in yaml file. Default filename is workflow.yaml and can be overridden by --workflow flag or GOOPSC_JIRA_WORKFLOW variable. Remote http url is also accepted. workflow structure workflow: source status: target status: transition name default: default transition name example workflow definition workflow: code review: default: ready to test in test: done: done default: bug found to do: rejected: reject default: start progress in progress: default: code review done: default: reopen rejected: default: reopen corresponding Jira workflow Workflow from env variable Alternatively workflow file content can be passed by GOOPSC_JIRA_WORKFLOW_CONTENT environment variable. export JIRA_WORKFLOW_CONTENT=$(cat - EOM workflow: code review: default: ready to test in test: done: done default: bug found to do: rejected: reject default: start progress in progress: default: code review done: default: reopen rejected: default: reopen EOM )","title":"Transitioning issues"},{"location":"features/nightly-releases/","text":"Description Create nightly releases from CI pipeline. Output variables none Configuration defaults GOOPSC_GIT_TOKEN= GOOPSC_GIT_TOKEN required: true Authorization token for git repository with write access. Travis CI with Github example after_success: - goops tag nightly deploy: provider: releases api_key: $GOOPSC_GIT_TOKEN file_glob: true file: bin/* prerelease: true overwrite: true skip_cleanup: true on: tags: true","title":"Nightly releases"},{"location":"features/nightly-releases/#description","text":"Create nightly releases from CI pipeline.","title":"Description"},{"location":"features/nightly-releases/#output-variables","text":"none","title":"Output variables"},{"location":"features/nightly-releases/#configuration-defaults","text":"GOOPSC_GIT_TOKEN= GOOPSC_GIT_TOKEN required: true Authorization token for git repository with write access.","title":"Configuration defaults"},{"location":"features/nightly-releases/#travis-ci-with-github-example","text":"after_success: - goops tag nightly deploy: provider: releases api_key: $GOOPSC_GIT_TOKEN file_glob: true file: bin/* prerelease: true overwrite: true skip_cleanup: true on: tags: true","title":"Travis CI with Github example"},{"location":"features/semver/","text":"Description Auto semantic version based on selected strategy. Available strategies: gitlab-flow Output variables GOOPS_SEMVER=1.2.3-SNAPSHOT GOOPS_SEMVER_RELEASE=1.2.3 GOOPS_SEMVER_MAJOR=1 GOOPS_SEMVER_MINOR=2 GOOPS_SEMVER_PATCH=3 Configuration defaults GOOPSC_SEMVER=false GOOPSC_SEMVER_STRATEGY=gitlab-flow gitlab-flow strategy This strategy is designed for Gitlab flow with release branches. Which is described in Gitlab documentation rules for master branch Find previous tag. If there are no tags previous tag will be assumed as 0.0.0 Bump previous tag minor version and set patch version to 0. If *-stable branch matching version exists bump minor version once more. Append \"-SNAPSHOT\" to version. rules for *-stable branches If HEAD is tagged use tag as version. Else find previous tag and bump patch version. If tag not exists take version from branch name and set patch to 0. current branch tag previousTag stableBranch version release version master 0.1.0-SNAPSHOT 0.1.0 master 0.1-stable 0.2.0-SNAPSHOT 0.2.0 master 0.1.0 0.1-stable 0.2.0-SNAPSHOT 0.2.0 master 0.1.1 0.1-stable 0.2.0-SNAPSHOT 0.2.0 master 0.1.1 0.1.0 0.1-stable 0.2.0-SNAPSHOT 0.2.0 0.1-stable 0.1-stable 0.1.0-SNAPSHOT 0.1.0 0.1-stable 0.1.0 0.1-stable 0.1.0 0.1.0 0.1-stable 0.1.0 0.1-stable 0.1.1-SNAPSHOT 0.1.1 0.1-stable 0.1.1 0.1.0 0.1-stable 0.1.1 0.1.1 0.2-stable 0.2-stable 0.2.0-SNAPSHOT 0.2.0","title":"Auto semver"},{"location":"features/semver/#description","text":"Auto semantic version based on selected strategy. Available strategies: gitlab-flow","title":"Description"},{"location":"features/semver/#output-variables","text":"GOOPS_SEMVER=1.2.3-SNAPSHOT GOOPS_SEMVER_RELEASE=1.2.3 GOOPS_SEMVER_MAJOR=1 GOOPS_SEMVER_MINOR=2 GOOPS_SEMVER_PATCH=3","title":"Output variables"},{"location":"features/semver/#configuration-defaults","text":"GOOPSC_SEMVER=false GOOPSC_SEMVER_STRATEGY=gitlab-flow","title":"Configuration defaults"},{"location":"features/semver/#gitlab-flow-strategy","text":"This strategy is designed for Gitlab flow with release branches. Which is described in Gitlab documentation rules for master branch Find previous tag. If there are no tags previous tag will be assumed as 0.0.0 Bump previous tag minor version and set patch version to 0. If *-stable branch matching version exists bump minor version once more. Append \"-SNAPSHOT\" to version. rules for *-stable branches If HEAD is tagged use tag as version. Else find previous tag and bump patch version. If tag not exists take version from branch name and set patch to 0. current branch tag previousTag stableBranch version release version master 0.1.0-SNAPSHOT 0.1.0 master 0.1-stable 0.2.0-SNAPSHOT 0.2.0 master 0.1.0 0.1-stable 0.2.0-SNAPSHOT 0.2.0 master 0.1.1 0.1-stable 0.2.0-SNAPSHOT 0.2.0 master 0.1.1 0.1.0 0.1-stable 0.2.0-SNAPSHOT 0.2.0 0.1-stable 0.1-stable 0.1.0-SNAPSHOT 0.1.0 0.1-stable 0.1.0 0.1-stable 0.1.0 0.1.0 0.1-stable 0.1.0 0.1-stable 0.1.1-SNAPSHOT 0.1.1 0.1-stable 0.1.1 0.1.0 0.1-stable 0.1.1 0.1.1 0.2-stable 0.2-stable 0.2.0-SNAPSHOT 0.2.0","title":"gitlab-flow strategy"}]}